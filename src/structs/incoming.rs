#[derive(Debug)]
pub enum IncomingMessageId {
    NotValid = -1,
    TickPrice = 1,
    TickSize = 2,
    OrderStatus = 3,
    Error = 4,
    OpenOrder = 5,
    AccountValue = 6,
    PortfolioValue = 7,
    AccountUpdateTime = 8,
    NextValidId = 9,
    ContractData = 10,
    ExecutionData = 11,
    MarketDepth = 12,
    MarketDepthL2 = 13,
    NewsBulletins = 14,
    ManagedAccounts = 15,
    ReceiveFA = 16,
    HistoricalData = 17,
    BondContractData = 18,
    ScannerParameters = 19,
    ScannerData = 20,
    TickOptionComputation = 21,
    TickGeneric = 45,
    Tickstring = 46,
    TickEFP = 47,
    CurrentTime = 49,
    RealTimeBars = 50,
    FundamentalData = 51,
    ContractDataEnd = 52,
    OpenOrderEnd = 53,
    AccountDownloadEnd = 54,
    ExecutionDataEnd = 55,
    DeltaNeutralValidation = 56,
    TickSnapshotEnd = 57,
    MarketDataType = 58,
    CommissionsReport = 59,
    Position = 61,
    PositionEnd = 62,
    AccountSummary = 63,
    AccountSummaryEnd = 64,
    VerifyMessageApi = 65,
    VerifyCompleted = 66,
    DisplayGroupList = 67,
    DisplayGroupUpdated = 68,
    VerifyAndAuthMessageApi = 69,
    VerifyAndAuthCompleted = 70,
    PositionMulti = 71,
    PositionMultiEnd = 72,
    AccountUpdateMulti = 73,
    AccountUpdateMultiEnd = 74,
    SecurityDefinitionOptionParameter = 75,
    SecurityDefinitionOptionParameterEnd = 76,
    SoftDollarTier = 77,
    FamilyCodes = 78,
    SymbolSamples = 79,
    MktDepthExchanges = 80,
    TickReqParams = 81,
    SmartComponents = 82,
    NewsArticle = 83,
    TickNews = 84,
    NewsProviders = 85,
    HistoricalNews = 86,
    HistoricalNewsEnd = 87,
    HeadTimestamp = 88,
    HistogramData = 89,
    HistoricalDataUpdate = 90,
    RerouteMktDataReq = 91,
    RerouteMktDepthReq = 92,
    MarketRule = 93,
    PnL = 94,
    PnLSingle = 95,
    HistoricalTick = 96,
    HistoricalTickBidAsk = 97,
    HistoricalTickLast = 98,
    TickByTick = 99,
    OrderBound = 100,
    CompletedOrder = 101,
    CompletedOrdersEnd = 102,
    ReplaceFAEnd = 103,
    WshMetaData = 104,
    WshEventData = 105,
    HistoricalSchedule = 106,
    UserInfo = 107,
}

impl TryFrom<i32> for IncomingMessageId {
    type Error = String;

    fn try_from(value: i32) -> Result<Self, <crate::structs::IncomingMessageId as TryFrom<i32>>::Error> {
        match value {
            -1 => Ok(Self::NotValid),
            1 => Ok(Self::TickPrice),
            2 => Ok(Self::TickSize),
            3 => Ok(Self::OrderStatus),
            4 => Ok(Self::Error),
            5 => Ok(Self::OpenOrder),
            6 => Ok(Self::AccountValue),
            7 => Ok(Self::PortfolioValue),
            8 => Ok(Self::AccountUpdateTime),
            9 => Ok(Self::NextValidId),
            10 => Ok(Self::ContractData),
            11 => Ok(Self::ExecutionData),
            12 => Ok(Self::MarketDepth),
            13 => Ok(Self::MarketDepthL2),
            14 => Ok(Self::NewsBulletins),
            15 => Ok(Self::ManagedAccounts),
            16 => Ok(Self::ReceiveFA),
            17 => Ok(Self::HistoricalData),
            18 => Ok(Self::BondContractData),
            19 => Ok(Self::ScannerParameters),
            20 => Ok(Self::ScannerData),
            21 => Ok(Self::TickOptionComputation),
            45 => Ok(Self::TickGeneric),
            46 => Ok(Self::Tickstring),
            47 => Ok(Self::TickEFP),
            49 => Ok(Self::CurrentTime),
            50 => Ok(Self::RealTimeBars),
            51 => Ok(Self::FundamentalData),
            52 => Ok(Self::ContractDataEnd),
            53 => Ok(Self::OpenOrderEnd),
            54 => Ok(Self::AccountDownloadEnd),
            55 => Ok(Self::ExecutionDataEnd),
            56 => Ok(Self::DeltaNeutralValidation),
            57 => Ok(Self::TickSnapshotEnd),
            58 => Ok(Self::MarketDataType),
            59 => Ok(Self::CommissionsReport),
            61 => Ok(Self::Position),
            62 => Ok(Self::PositionEnd),
            63 => Ok(Self::AccountSummary),
            64 => Ok(Self::AccountSummaryEnd),
            65 => Ok(Self::VerifyMessageApi),
            66 => Ok(Self::VerifyCompleted),
            67 => Ok(Self::DisplayGroupList),
            68 => Ok(Self::DisplayGroupUpdated),
            69 => Ok(Self::VerifyAndAuthMessageApi),
            70 => Ok(Self::VerifyAndAuthCompleted),
            71 => Ok(Self::PositionMulti),
            72 => Ok(Self::PositionMultiEnd),
            73 => Ok(Self::AccountUpdateMulti),
            74 => Ok(Self::AccountUpdateMultiEnd),
            75 => Ok(Self::SecurityDefinitionOptionParameter),
            76 => Ok(Self::SecurityDefinitionOptionParameterEnd),
            77 => Ok(Self::SoftDollarTier),
            78 => Ok(Self::FamilyCodes),
            79 => Ok(Self::SymbolSamples),
            80 => Ok(Self::MktDepthExchanges),
            81 => Ok(Self::TickReqParams),
            82 => Ok(Self::SmartComponents),
            83 => Ok(Self::NewsArticle),
            84 => Ok(Self::TickNews),
            85 => Ok(Self::NewsProviders),
            86 => Ok(Self::HistoricalNews),
            87 => Ok(Self::HistoricalNewsEnd),
            88 => Ok(Self::HeadTimestamp),
            89 => Ok(Self::HistogramData),
            90 => Ok(Self::HistoricalDataUpdate),
            91 => Ok(Self::RerouteMktDataReq),
            92 => Ok(Self::RerouteMktDepthReq),
            93 => Ok(Self::MarketRule),
            94 => Ok(Self::PnL),
            95 => Ok(Self::PnLSingle),
            96 => Ok(Self::HistoricalTick),
            97 => Ok(Self::HistoricalTickBidAsk),
            98 => Ok(Self::HistoricalTickLast),
            99 => Ok(Self::TickByTick),
            100 => Ok(Self::OrderBound),
            101 => Ok(Self::CompletedOrder),
            102 => Ok(Self::CompletedOrdersEnd),
            103 => Ok(Self::ReplaceFAEnd),
            104 => Ok(Self::WshMetaData),
            105 => Ok(Self::WshEventData),
            106 => Ok(Self::HistoricalSchedule),
            107 => Ok(Self::UserInfo),
            _ => Err(format!("Invalid IncomingMessageId value: {value}"))
        }
    }
}